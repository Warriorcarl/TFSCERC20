{
	"author": "Breakthrough Labs Inc.",
	"custom:address": "5",
	"custom:default-precision": "18",
	"custom:simple-description": "Token that allows the owner to mint as many tokens as desired.",
	"custom:version": "1.0.7",
	"details": "ERC20 token with the following features:  - Premint your initial supply.  - Mint as many tokens as you want with no cap.  - Only the contract owner can mint new tokens.",
	"events": {
		"Approval(address,address,uint256)": {
			"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
		},
		"Transfer(address,address,uint256)": {
			"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
		}
	},
	"kind": "dev",
	"methods": {
		"allowance(address,address)": {
			"details": "See {IERC20-allowance}."
		},
		"approve(address,uint256)": {
			"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
		},
		"balanceOf(address)": {
			"details": "See {IERC20-balanceOf}."
		},
		"constructor": {
			"params": {
				"initialSupply": "Initial Supply",
				"name": "Token Name",
				"symbol": "Token Symbol"
			}
		},
		"decimals()": {
			"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
		},
		"decreaseAllowance(address,uint256)": {
			"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
		},
		"increaseAllowance(address,uint256)": {
			"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
		},
		"mint(uint256,address)": {
			"details": "Creates `amount` tokens and assigns them to `to`, increasing the total supply. Only accessible by the contract owner."
		},
		"name()": {
			"details": "Returns the name of the token."
		},
		"owner()": {
			"details": "Returns the address of the current owner."
		},
		"renounceOwnership()": {
			"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
		},
		"symbol()": {
			"details": "Returns the symbol of the token, usually a shorter version of the name."
		},
		"totalSupply()": {
			"details": "See {IERC20-totalSupply}."
		},
		"transfer(address,uint256)": {
			"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
		},
		"transferFrom(address,address,uint256)": {
			"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
		},
		"transferOwnership(address)": {
			"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
		}
	},
	"title": "Mintable Token",
	"version": 1
}